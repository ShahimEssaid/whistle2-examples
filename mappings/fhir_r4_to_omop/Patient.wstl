package fhir_omop

import "class://com.google.cloud.verticals.foundations.dataharmonization.plugins.logging.LoggingPlugin"


def FHIRR4_Patient_OMOP(patient) {
  // Apply the base FHIR to OMOP mappings
  FHIR_Patient_OMOP(patient)

  // Add the gender mapping. This can probably be done in the base mapping above but it is done here
  // for demonstration purposes.
  gender_concept_id: _LookupGenderCode(patient)
}

// A helper function to return a simple code value for the OMOP gender
def _LookupGenderCode(patient){
  if patient.gender then {

      // These vars are spelled out for readability and are not really necessary
      var sourceCode: patient.gender
      var sourceSystem: "http://hl7.org/fhir/ValueSet/administrative-gender"
      var targetSystem: "omop53"
      var conceptMapId: "fhir_patient.gender_omop_person.gender_concept_id"

      // This returns all possible target mappings as an array of Coding instances.
      // But, if the code does not have a mapping, one Coding is returned with the same source code as "code", and the concept map id suffixes with "-unharmonized" as "system"
      var codings: harmonization::harmonizeWithTarget("$Local", sourceCode, sourceSystem, targetSystem, conceptMapId)

      // We need to check if the sourceCode was really mapped, or return 0
      // But, this check is not needed now that the "unmapped" information is added to the concept map file. This information
      // basically does the same. It says use "0" if there is no target mapping, and the target system will be set to the group's system as well.
      if codings[0].system == "{conceptMapId}-unharmonized" then {
        logging::logWarning(): "Unmapped Patient.gender for patient id: {patient.id}, with gender: {patient.gender}."
        "0"
      } else {
        codings[0].code
      }
  }
}